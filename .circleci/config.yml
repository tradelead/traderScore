version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  unitTest:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-modules-dev-{{ checksum "package-lock.json" }}
            - node-modules-dev
      - run: NODE_ENV=development npm install
      - save_cache:
          paths:
            - node_modules
          key: node-modules-dev-{{ checksum "package-lock.json" }}
      - run: npm run test:unit
  intTest:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-modules-dev-{{ checksum "package-lock.json" }}
            - node-modules-dev
      - run: NODE_ENV=development npm install
      - save_cache:
          paths:
            - node_modules
          key: node-modules-dev-{{ checksum "package-lock.json" }}
      - run: npm run test:int:up
      - run: |
          export NVM_DIR="/opt/circleci/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install v8.11.3
          nvm alias default v8.11.3
          npm run test:int
      - run: npm run test:int:down
  createChangeSet:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-modules-{{ checksum "package-lock.json" }}
            - node-modules
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: node-modules-{{ checksum "package-lock.json" }}
      - run: sudo apt-get install python-dev
      - aws-cli/install
      - run: |
          PARAMETERS="CoreStack=$CORE_STACK "
          PARAMETERS+="MySQLDbName=$MYSQL_DB_NAME "
          PARAMETERS+="MySQLUser=$MYSQL_USER "
          PARAMETERS+="MySQLPass=$MYSQL_PASS "
          PARAMETERS+="NodeEnv=$NODE_ENV "
          PARAMETERS+="MockExchangeService=false "

          mkdir workspace
          aws cloudformation package --template-file infra/template.yml --s3-bucket $S3_CODE_BUCKET --output-template-file package.yml
          aws cloudformation deploy --stack-name $STACK_NAME --no-execute-changeset --capabilities CAPABILITY_IAM --template-file package.yml --parameter-overrides $PARAMETERS | tee workspace/changeset.txt
          CHANGE_SET_NAME=$(grep -o "arn:aws:cloudformation.*" workspace/changeset.txt)
          echo $CHANGE_SET_NAME >> workspace/changesetname.txt
          echo $CHANGE_SET_NAME
      - persist_to_workspace:
          root: workspace
          paths:
            - changesetname.txt
  executeChangeSet:
    docker:
      - image: circleci/buildpack-deps:jessie
    steps:
      - attach_workspace:
          at: workspace
      - run: sudo apt-get install python-dev
      - aws-cli/install
      - run: |
          CHANGE_SET_NAME=$(cat workspace/changesetname.txt)
          aws cloudformation execute-change-set --change-set-name $CHANGE_SET_NAME
          aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
  dbSetupAndMigrate:
    docker:
      - image: circleci/node:8
    steps:
      - add_ssh_keys
      - checkout
      - restore_cache:
          keys:
            - node-modules-dev-{{ checksum "package-lock.json" }}
            - node-modules-dev
      - run: NODE_ENV=development npm install
      - save_cache:
          paths:
            - node_modules
          key: node-modules-dev-{{ checksum "package-lock.json" }}
      - run: |
          node_modules/.bin/tl-infra allow-ssh-my-ip --stack-name $CORE_STACK
          node_modules/.bin/tl-infra create-rds-tunnel --stack-name $CORE_STACK --port 9000

          export DATABASE_HOST=127.0.0.1
          export DATABASE_PORT=9000
          export DATABASE_NAME=$MYSQL_DB_NAME
          export DATABASE_USER=$MYSQL_USER
          export DATABASE_PASSWORD=$MYSQL_PASS
          export DATABASE_POOL_MIN=1
          export DATABASE_POOL_MAX=2

          npm run db:setup
          npm run db:migrate

          node_modules/.bin/tl-infra close-rds-tunnel --stack-name $CORE_STACK
          node_modules/.bin/tl-infra deny-ssh-my-ip --stack-name $CORE_STACK
  deleteChangeSet:
    docker:
      - image: circleci/buildpack-deps:jessie
    steps:
      - attach_workspace:
          at: workspace
      - run: |
          sudo apt-get install python-dev
      - aws-cli/install
      - run: |
          CHANGE_SET_NAME=$(cat workspace/changesetname.txt)
          aws cloudformation delete-change-set --change-set-name $CHANGE_SET_NAME

workflows:
  test_and_deploy:
    jobs:
      - unitTest
      - intTest
      - createChangeSet
      - executeChangeSet:
          requires:
            - createChangeSet
          filters:
            branches:
              only:
                - master
      - dbSetupAndMigrate:
          requires:
            - executeChangeSet
          filters:
            branches:
              only:
                - master
      - deleteChangeSet:
          requires:
            - createChangeSet
          filters:
            branches:
              ignore:
                - master
