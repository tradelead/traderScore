const AWS = require('aws-sdk');

const ec2 = new AWS.EC2({ apiVersion: '2016-11-15' });

module.exports = async (securityGroupID) => {
  const params = { GroupIds: [securityGroupID] };
  const { SecurityGroups } = await ec2.describeSecurityGroups(params).promise();
  const SecurityGroup = SecurityGroups[0];


  const IpPermission = SecurityGroup.IpPermissions.find(IngressPermission => (
    IngressPermission.IpProtocol === 'tcp'
    && IngressPermission.FromPort === 22
  ));

  const IpRanges = IpPermission ? IpPermission.IpRanges : [];

  const ExpiredIpRanges = IpRanges.filter((IpRange) => {
    const time = parseInt(IpRange.Description.split('CLI:')[1], 10);
    return time < Date.now() && IpRange.Description.indexOf('Generated By CLI:') === 0;
  });

  await Promise.all(ExpiredIpRanges.map(async (IpRange) => {
    const revokeParams = {
      CidrIp: IpRange.CidrIp,
      FromPort: 22,
      ToPort: 22,
      GroupId: securityGroupID,
      IpProtocol: 'tcp',
    };

    return ec2.revokeSecurityGroupIngress(revokeParams).promise();
  }));
};
