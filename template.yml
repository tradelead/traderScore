AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  TraderExchangeWatchStack:
    Type: String
  AccountStack:
    Type: String

Resources:
  GraphQL:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: GraphQL.handler
      Runtime: nodejs8.10
      Events:
        GraphQL:
          Type: 'Api'
          Properties:
            Path: /graphql
            Method: post

  MoveDueScoreUpdatesToQueue:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: MoveDueScoreUpdatesToQueue.handler
      Runtime: nodejs8.10
      Events:
        MoveDueScoreUpdatesToQueueJob:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt ScoreUpdatesQueue.Arn

  NewFilledOrderConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: NewFilledOrderConsumer.handler
      Runtime: nodejs8.10
      Events:
        NewFilledOrderEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewFilledOrderQueue.Arn
            BatchSize: 10

  NewFilledOrderQueue:
    Type: AWS::SQS::Queue

  NewFilledOrderSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn:
        Fn::ImportValue: !Sub "${TraderExchangeWatchStack}-NewFilledOrderTopicArn"
      Endpoint: !GetAtt NewFilledOrderQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  NewSuccessfulDepositConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: NewSuccessfulDepositConsumer.handler
      Runtime: nodejs8.10
      Events:
        NewSuccessfulDepositEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewSuccessfulDepositQueue.Arn
            BatchSize: 10

  NewSuccessfulDepositQueue:
    Type: AWS::SQS::Queue

  NewSuccessfulDepositSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn:
        Fn::ImportValue: !Sub "${TraderExchangeWatchStack}-NewSuccessfulDepositTopicArn"
      Endpoint: !GetAtt NewSuccessfulDepositQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  NewSuccessfulWithdrawalConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: NewSuccessfulWithdrawalConsumer.handler
      Runtime: nodejs8.10
      Events:
        NewSuccessfulWithdrawalEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewSuccessfulWithdrawalQueue.Arn
            BatchSize: 10

  NewSuccessfulWithdrawalQueue:
    Type: AWS::SQS::Queue

  NewSuccessfulWithdrawalSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn:
        Fn::ImportValue: !Sub "${TraderExchangeWatchStack}-NewSuccessfulWithdrawalTopicArn"
      Endpoint: !GetAtt NewSuccessfulWithdrawalQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  NewTraderExchangeConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: NewTraderExchangeConsumer.handler
      Runtime: nodejs8.10
      Events:
        NewTraderExchangeEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewTraderExchangeQueue.Arn
            BatchSize: 10

  NewTraderExchangeQueue:
    Type: AWS::SQS::Queue

  NewTraderExchangeSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn:
        Fn::ImportValue: !Sub "${AccountStack}-NewTraderExchangeTopicArn"
      Endpoint: !GetAtt NewTraderExchangeQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  RemoveTraderExchangeConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: RemoveTraderExchangeConsumer.handler
      Runtime: nodejs8.10
      Events:
        RemoveTraderExchangeEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RemoveTraderExchangeQueue.Arn
            BatchSize: 10

  RemoveTraderExchangeQueue:
    Type: AWS::SQS::Queue

  RemoveTraderExchangeSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn:
        Fn::ImportValue: !Sub "${AccountStack}-RemoveTraderExchangeTopicArn"
      Endpoint: !GetAtt RemoveTraderExchangeQueue.Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  ScoreUpdatesConsumer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/lambda/
      Handler: RemoveTraderExchangeConsumer.handler
      Runtime: nodejs8.10
      Events:
        ScoreUpdatesEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ScoreUpdatesQueue.Arn
            BatchSize: 10

  ScoreUpdatesQueue:
    Type: AWS::SQS::Queue
